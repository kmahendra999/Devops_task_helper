yum install mariadb* -y
systemctl enable --now mariadb
systemctl status mariadb
netstat -tulpn | grep mysqld
firewall-cmd --permanent --add-port=3306/tcp
firewall-cmd --reload
****
SSH KE CASE ME PORT DEFAULT PUBLICH HOTA HE CHECK KE LIYE : firewall-cmd --get-defaults-zone
abhi firewall me kya allowed he check ke liye
vim /etc/firewalld/zones/public.xml
****
mysql -u root -p
-p for password prompt
Enter if you have seted else hit enter

SHOW DATABASES;
exit;

mysql_secure_installaion
  
*************
  
<pre>
  [root@control ~]# mysql_secure_installation

NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!

In order to log into MariaDB to secure it, we'll need the current
password for the root user.  If you've just installed MariaDB, and
you haven't set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none): 
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.

Set root password? [Y/n] y 
New password: 
Re-enter new password: 
Password updated successfully!
Reloading privilege tables..
 ... Success!


By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y
 ... Success!

Normally, root should only be allowed to connect from 'localhost'.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] Y
 ... Success!

By default, MariaDB comes with a database named 'test' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y
 ... Success!

Cleaning up...

All done!  If you've completed all of the above steps, your MariaDB
installation should now be secure.

Thanks for using MariaDB!
[root@control ~]# 


  You can Set options according to you.
</pre>
*************


SHOW DATABASES;

CREATE DATABASE db_name;
use db_name;
SHOW TABLES;
DESCRIBE TABLE_NAME;

SELECT * FROM TABLE_NAME WHERE column=value;

************
user creation in databse servers.

mysql -u root -p
CREATE USER gaurav@'localhost' identified by 'redhat';
localhost can be % also for all host allowd for login.

SELECT User, Host from user;

***************
Giving permission to users for see tables.

mysql -u root -p
grant all on TABLE_NAME.* to gaurav@localhost;
all = all permisiion 
* = all columns

**************
removing user permission
revoke all on mysql.user from gaurav@localhost;

*************
Removing user

DROP USER 'gaurav'@localhost


******************
BACK UP
mysqldump -u root -p DB_NAME > /tmp/abc.dump

cat / vim /tmp/abc.dump


mysqldump -u root -p --all-databases > /tmp/abdc.dump
******************
RESTORE
mysql -u root -p DB_name1 < /tmp/abc.dump

search on google
mariadb configuraion options
vim /etc/my.cnf.d/mariadb-server.cnf
vim /etc/my.cnf.d/mariadb-client.cnf
systemctl restart mariadb

databsae ka data directory
/var/lib/mysql/

logs ka direcoty
ls -l /var/log/mariadb/mariadb.log


DB SERVER KA PHYSICAL BACKUP
db server /var/lib/mysql ko kisi dive pe mount karwa kar like /datadrive and us drive ka lvm snapshot liya.
and ab hum us snapshot se mysqldump command se bankup lenge to db server par load nahi rahega.

DB SERVER KA LOGICAL BACKUP my sql dump command se lena.

HOT BACKUP --- MACHINE CHAL RAHI HE AND RUN TIME PAR BACKUP LIYA
COLD BACKUP --- SERVER KO BAND KARKE BACKUP LENA



